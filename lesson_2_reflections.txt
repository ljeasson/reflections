What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repositiory, you create a hidden .git folder in
    the directory. This will allow you to save different versions (commits)
    of the files in the directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area acts as an intermediary between the repository and the 
    working directory. It allows you to pick and choose which files from the
    working directory you would like to add to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

    You can add only the files that you want to put into one single logical 
    commit and then run the 'git commit' command.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be useful for creating different language versions of your 
    software or if you want to try out an experimental feature. Branches would 
    allow you to try out a new feature but allow you to revert back to the 
    orginal version if needed.

How do the diagrams help you visualize the branch structure?

    They help me visualize a git repository as not just a strictly linear 
    structure, but as one in which branches can be added to it.
    

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches togther makes it so that the commits in each branch are
    placed into the same git log.  We represent it in the diagram as two divergent
    branches being linked together.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

    Automatic merging is easier to do, but it does not automatically handle any 
    merge conflicts.  Manual merges can solve any merge conflicts, but are less easier
    to do and could lead to creating new bugs or errors.

    